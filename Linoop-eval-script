#!/bin/bash

echo -e "\n\e[36mLINOOP TEK RHCSA EVALUATION TOOL STARTING\nKEEP CALM AND SIT TIGHT\e[0m"
echo -e "\n\e[37m***********************RUNNING NOW******************************\n\e[0m"

: ' This Script evaluate students tasks
    - check root pw			--DONE
    - check static IP   		--DONE
    - check repos			--DONE
    - check chrony			--DONE
    - check autofs			--DONE
    - check group			--DONE
    - check users			--DONE
    - check group membership		--DONE
    - check user shell			--DONE
    - check sudo privilege		--DONE
    - check umask			--DONE
    - check enforce passwd		--DONE
    - check account expiry		--DONE
    - check max days			--DONE
    - check setgid perm			--DONE
    - check stickybit			--DONE
    - check group package		--DONE	
    - check selinux			--DONE
    - check bzip2 compression		--DONE
    - check journal			--DONE
    - check tuned profile		--DONE
    - check cron			--DONE
    - check cron block			--DONE
    - check lvm1			--DONE
    - check lvm2			--DONE
    - check lvm3			--DONE
    - check swap			--DONE
    - check ACL 			--DONE
    - check ACL bob  			--DONE
    - check webimage 			--DONE
    - check web container1		--DONE
    - check pdf file conversion		--DONE
    - check new webimage 		--DONE
    - check container myweb1		--DONE
    - check pdf file conversion		--DONE
    - check autofs config 		--DONE
  '

if [ `id -u` != 0 ];then
        echo ""
        echo -e "\e[31mFailed: Please Run this Script as root\e[0m\n"
        exit 1
fi
###############################################################################
check_pw() {
   echo "Checking Root PW........"

   # Install sshpass if not already installed
   if ! command -v sshpass &>/dev/null; then
      dnf install -q -y sshpass &>/dev/null
      if [ $? -ne 0 ]; then
         echo -e "\e[31mFailed to install sshpass. Exiting.\e[0m"
         exit 1
      fi
   fi

   # Update sshd config
   sed -i 's/^#\?PermitRootLogin.*/PermitRootLogin yes/' /etc/ssh/sshd_config
   sed -i 's/^#\?PasswordAuthentication.*/PasswordAuthentication yes/' /etc/ssh/sshd_config

   systemctl restart sshd &>/dev/null
   if [ $? -ne 0 ]; then
      echo -e "\e[31mFailed to restart sshd. Exiting.\e[0m"
      exit 1
   fi

   # Try logging in with root password
   sshpass -p 'redhat' ssh -o StrictHostKeyChecking=no root@localhost 'pwd >/dev/null' &>/dev/null
   if [ $? -eq 0 ]; then
      echo -e "\e[32mRoot_PW_Check: Pass\e[0m\n"
   else
      echo -e "\e[31mRoot_PW_Check: Fail\e[0m\n"
   fi
}

###############################################################################
check_interface() {
    if ip link show "$1" > /dev/null 2>&1; then
       echo -e "\nNetwork interface $1 exists.\n"
       #echo -e "          Running Validation"
       #echo -e "------------------------------------------\n"
       return 0
    else
       echo -e "\e[31mNetwork interface $1 does not exist. Please try again.\e[0m\n"
       return 1
    fi
}
################################################################################
check_IP() {
   while true; do
      read -p "Please Enter your network card name (e.g., enp0s3, ens): " n_card
      check_interface "$n_card" && break
   done

   ip_test=$(nmcli con show "$n_card" | grep ipv4.method | awk '{print $2}')

   echo -n "Checking IP"
   for i in {1..10}; do
       echo -n "."
       sleep 0.1
   done
   echo ""

   if [ -z "$ip_test" ]; then
       echo -e "\e[31mCould not determine IP method for interface $n_card\e[0m\n"
       return 1
   fi

   if [ "$ip_test" == "manual" ]; then
        echo -e "\e[32mIP_Check: PASS\e[0m\n"
   else
        echo -e "\e[31mIP_Check: FAIL\e[0m\n"
   fi
}
###################################################################################
check_repos(){
   echo "Checking Repositories.........."
app_chk=$(yum repolist enabled | grep -i AppStream | wc -l)
base_chk=$(yum repolist enabled | grep -i BaseOs | wc -l)

   if [ "$app_chk" -eq 0 ];then

     echo -e "\e[31mAPPSTREAM_Check: Fail\e[0m\n"

   else

     echo -e "\e[32mAPPSTREAM_Check: Pass\e[0m\n"

   fi

   if [ "$base_chk" -eq 0 ];then

     echo -e "\e[31mBASEOS_Check: Fail\e[0m\n"

   else

     echo -e "\e[32mBASEOS_Check: Pass\e[0m\n"

   fi

}
#####################################################################################
user_name="user1"
validate_autofs() {
	echo "Checking Autofs......."
        su - $user_name -c "touch /rhome/$user_name/uniq1" &>/dev/null
        file_st=$?
        df -h|grep $user_name &>/dev/null
        mn_st=$?

        if [ $file_st -eq 0 ]&&[ $mn_st -eq 0 ];then
                echo -e "\e[32mAutoFS_Check: Pass\e[0m\n"
        else
                echo -e "\e[31mAutoFS_Check: Fail\e[0m\n"
        fi
}	
################################################################################
check_chrony() {
    echo "Checking Chrony..."

    # Restart chronyd silently
    systemctl restart chronyd &>/dev/null

    # Check if chronyd is active
    chrony_chk=$(systemctl is-active chronyd)

    if [ "$chrony_chk" == "active" ]; then
        echo -e "\e[32mChrony_Check: Pass\e[0m\n"
    else
        echo -e "\e[31mChrony_Check: Fail\e[0m\n"
    fi
}

#####################################################################################
grp="admins"
check_grp(){
      echo "Check Group Exists ...."
      if [ `getent group admins` ];then
        echo -e "\e[32mGroup: Pass\e[0m\n"
      else
        echo -e "\e[31mGroup: Fail\e[0m\n"
      fi
}

check_users(){
    echo "Check Users Accounts ......"
    users=("max" "bob" "chris")

    all_users_exist=true

    for user in "${users[@]}"; do
      if ! id "$user" &>/dev/null; then
        #echo "User $user does not exist."
        all_users_exist=false
      fi
    done

    if [ "$all_users_exist" = true ]; then
        echo -e "\e[32mUSERS: Pass\e[0m\n"
    else
        echo -e "\e[31mUSERS: Fail\e[0m\n"
    fi
}


check_grp_membership(){
    echo "Check Group Membership ..................."
    grp="admins"
    users=("max" "bob")

    grp_members=true

    for user in "${users[@]}"; do
      if ! id -nG "$user" | grep -qw "$grp" &>/dev/null; then
        grp_members=false
      fi
    done

    if [ "$grp_members" = true ]; then
        echo -e "\e[32mGroup_membership: Pass\e[0m\n"
    else
        echo -e "\e[31mGroup_membership: Fail\e[0m\n"
    fi
}



check_usr_shell(){
    echo "Check chris shell ....."
    lg_shell=`grep chris /etc/passwd|awk -F : '{ print $7 }'|awk -F / '{ print $NF }'`
    des_shell="nologin"
    if [ $lg_shell == $des_shell ];then
	echo -e "\e[32mchris_shell: PASS\e[0m\n"
    else
	echo -e "\e[31mchris_shell: Fail\e[0m\n"
    fi
}

chk_sudo(){
    echo "Check SUDO ......"
    grep "^%admins" /etc/sudoers &>/dev/null
    sudo_st=$?
    grep "^%admins" /etc/sudoers|grep "NOPASSWD" &>/dev/null
    sudo_st1=$?

    if [ $sudo_st -eq 0 ] && [ $sudo_st1 -eq 0 ];then
        echo -e "\e[32mSudo_Group: Pass\e[0m\n"
    else
        echo -e "\e[31mSudo_Group: Fail\e[0m\n"
    fi
}


check_umask(){
   echo "Check UMASK ......."
   des_umask="0002"
   current_umask=`su - bob -c 'umask'`

   if [ $des_umask == $current_umask ];then
           echo -e "\e[32mUMASK: Pass\e[0m\n"
   else
           echo -e "\e[31mUMASK: Fail\e[0m\n"
   fi
}

chk_enforce_pw(){
    echo "Check password change enforce ....."
    user_n="max"
    chage -l "$user_n" |head -n1|grep -w 'password must be changed'&>/dev/null
    st=$?
    if [ $st -eq 0 ]; then
        echo -e "\e[32menforce_pw_change: Pass\e[0m\n"
    else
        echo -e "\e[31menforce_pw_change: Fail\e[0m\n"
    fi
}

chk_acc_exp(){
   echo "Check account expiration ......"
   des_exp_d=45
   chg_d=`chage -l "max" | grep "Account expires" | awk -F ':' '{print $NF}'|sed 's/^ *//;s/ *$//'`
   chage -l "max" | grep "Account expires"|grep -q never
   chg_never=$?
 if [ $chg_never -ne 0 ];then

   if [ `date -d +${des_exp_d}days +%Y-%m-%d` == `date -d "$chg_d" +"%Y-%m-%d"` ];then
           echo -e "\e[32maccount_expiry: Pass\e[0m\n"
   else
           echo -e "\e[31maccount_expiry: Fail\e[0m\n"
   fi

 else

           echo -e "\e[31maccount_expiry_set: Fail\e[0m\n"
 fi

}

chk_max_days(){
   echo "Check Max Days ....."
   max_d=`grep '^PASS_MAX_DAYS' /etc/login.defs|awk '{print $2}'`

   if [ $max_d == "90" ];then
        echo -e "\e[32mmax_days: Pass\e[0m\n"
   else
        echo -e "\e[31mmax_days: Fail\e[0m\n"
   fi
}

################################################################################
check_setgid_perm() {
    echo "Check SetGID......."
    dir="/tmp/developers"

    if [ -d "$dir" ]; then
        perm=$(stat -c "%A" "$dir")
        if [[ "$perm" == *"s"* ]]; then
            echo -e "\e[32mCollaboration_DIR: Pass\e[0m\n"
        else
            echo -e "\e[31mCollaboration_DIR: Fail\e[0m\n"
        fi
    else
        echo -e "\e[31mdevelopers_dir_exists: Fail\e[0m\n"
    fi
}

check_sticky_bit() {
    echo "Check StickyBit ......"
    dir="/tmp/developers"

    if [ -d "$dir" ]; then
        perm=$(stat -c "%A" "$dir")
        if [[ "$perm" == *"t"* ]] || [[ "$perm" == *"T"* ]]; then
            echo -e "\e[32msticky_bit: Pass\e[0m\n"
        else
            echo -e "\e[31msticky_bit: Fail\e[0m\n"
        fi
    else
        echo -e "\e[31mdevelopers_dir_exists: Fail\e[0m\n"
    fi
}

################################################################################
chk_grp_pkg() {
    echo "Check Group Software Install......"
    dnf grouplist --installed | grep -w "RPM Development Tools" &>/dev/null
    pk_e=$?

    if [ $pk_e -eq 0 ]; then
        echo -e "\e[32mgrp_pkg_install: Pass\e[0m\n"
    else
        echo -e "\e[31mgrp_pkg_install: Fail\e[0m\n"
    fi
}

################################################################################
check_selinux() {
    echo "Check website is accessible....."
    selinux_chk=$(curl -s localhost:82)
    firewall-cmd --list-ports | grep -q '82'
    selinux_port=$?

    if [ "$selinux_chk" == "I am Enjoying RHCSA preparation" ]; then
        echo -e "\e[32mSelinux_Web_Running: Pass\e[0m\n"
    else
        echo -e "\e[31mSelinux_Web_Running: Fail\e[0m\n"
    fi

    if [ $selinux_port -eq 0 ]; then
        echo -e "\e[32mSelinux_Web_Firewall_Port: Pass\e[0m\n"
    else
        echo -e "\e[31mSelinux_Web_Firewall_Port: Fail\e[0m\n"
    fi
}
################################################################################
check_bzip2_compression(){
  echo "Checking bzip2 compression..."
  file_n="/tmp/archive.tar"

  if file "$file_n" | grep -q "bzip2 compressed data"; then
    echo -e "\e[32mbzip2_compression: PASS\e[0m\n"
  else
    echo -e "\e[31mbzip2_compression: FAIL\e[0m\n"
  fi
}
################################################################################
check_journal(){
  echo "Checking persistent journal..."
  journal_dir="/var/log/journal"

  if [ -d "$journal_dir" ] && [ "$(ls -A "$journal_dir")" ]; then
    echo -e "\e[32mpersistent_journal: PASS\e[0m\n"
  else
    echo -e "\e[31mpersistent_journal: FAIL\e[0m\n"
  fi
}
################################################################################
check_tuned_profile(){
  echo "Checking tuned profile..."
  systemctl restart tuned &>/dev/null

  recommended_profile=$(tuned-adm recommend)
  current_profile=$(tuned-adm active | awk -F': ' '{print $2}' | xargs)

  if [ "$current_profile" == "$recommended_profile" ]; then
    echo -e "\e[32mtuned_profile: PASS\e[0m\n"
  else
    echo -e "\e[31mtuned_profile: FAIL\e[0m\n"
  fi
}
################################################################################
check_cron(){
  echo "Checking cron job log entry..."
  
  if grep -q "RHCSA9" /var/log/messages; then
    echo -e "\e[32mcron: PASS\e[0m\n"
  else
    echo -e "\e[31mcron: FAIL\e[0m\n"
  fi 
}

check_natasha_cron_block(){
  echo "Checking if user 'natasha' is blocked from creating cron jobs..."

  if grep -q "^natasha$" /etc/cron.deny; then
    echo -e "\e[32mcron_block_natasha: PASS (user denied in /etc/cron.deny)\e[0m\n"
  elif [ -f /etc/cron.allow ] && ! grep -q "^natasha$" /etc/cron.allow; then
    echo -e "\e[32mcron_block_natasha: PASS (user not in /etc/cron.allow)\e[0m\n"
  else
    echo -e "\e[31mcron_block_natasha: FAIL (user can create cron jobs)\e[0m\n"
  fi
}
################################################################################
check_lvm1(){
   filesystem="/app1"
   df -h|grep -q app1
   fs_st=$?
   echo "Checking LVM Question 16......."
   if [ $fs_st -eq 0 ];then
	  filesystem_size=$(df -m | grep "$filesystem" | awk '{print $2}')
	  if [ $filesystem_size -ge 250 ] && [ $filesystem_size -le 300 ]; then
	      echo -e "\e[32mQ17: Pass\e[0m\n"
	  else
	      echo -e "\e[31mQ17: Fail\e[0m\n"
	  fi
   else
	   echo -e "\e[31mCheck $filesystem exists: Fail\e[0m\n"
   fi
}

################################################################################
check_lvm2(){
   filesystem="/app2"
   df -h|grep -q app2
   fs_st=$?
   echo "Checking LVM Question 17 ....."
   if [ $fs_st -eq 0 ];then
	  echo "Checking filesystem size for extension in Q18 ........"
	  filesystem_size=$(df -m | grep "$filesystem" | awk '{print $2}')
	  if [ $filesystem_size -ge 450 ] && [ $filesystem_size -le 500 ]; then
	      echo -e "\e[32m Q18: Pass\e[0m\n"
	  else
	      echo -e "\e[31m Q18: Fail\e[0m\n"
	  fi
   else
	   echo -e "\e[31mCheck $filesystem exists: Fail\e[0m\n"
   fi
}

################################################################################
check_lvm3(){
   vg_n="vg3"
   lv_n="lv3"
   echo "Checking LVM Question 18 ......"

   vgs 2>/dev/null | grep -w ${vg_n} >/dev/null
   vg_st=$?
   lvs 2>/dev/null | grep -w ${lv_n} >/dev/null
   lv_st=$?

   if [ $vg_st -eq 0 ] && [ $lv_st -eq 0 ]; then
      echo "Verifying PE size and LE count..."

      pe_req_size=8
      req_le=50

      pe_size=$(vgdisplay $vg_n | awk '/PE Size/ {print int($3)}')
      aloc_le=$(lvdisplay /dev/${vg_n}/${lv_n} | awk '/Current LE/ {print $3}')

      if [ "$pe_size" -eq "$pe_req_size" ]; then
         echo -e "\e[32m Q19 Task1: PE Size = ${pe_size}MiB → Pass\e[0m"
      else
         echo -e "\e[31m Q19 Task1: PE Size = ${pe_size}MiB → Fail\e[0m"
      fi

      if [ "$aloc_le" -eq "$req_le" ]; then
         echo -e "\e[32m Q19 Task2: LE Count = ${aloc_le} → Pass\e[0m"
      else
         echo -e "\e[31m Q19 Task2: LE Count = ${aloc_le} → Fail\e[0m"
      fi
   else
      echo -e "\e[31mCheck VG '$vg_n' and LV '$lv_n' exists: Fail\e[0m"
   fi
}

######################################################################################
swap_check(){
   echo "check swap Question 19 .........."
   swapon -s |egrep -q 'sdb4|vdb1'
   swp_st=$?
   #swp_disk=$(swapon -s |egrep 'sdb4|vdb1' 2>/dev/null|awk -F '/' '{print $3}'|awk '{print $1}')
   #add_size="512"


   if [ $swp_st -eq 0 ];then
      echo -e "\e[32mswp_disk_chk: Pass\e[0m\n"
      #sw_sdb4=$(swapon -s|grep ${swp_disk}|awk '{printf $3/1023}'|awk -F "." '{print $1}')
      sw_sdb4=$(lsblk|grep SWAP|egrep 'sdb4|vdb1'|awk '{print $4}'|tr -d M)
      if [ "$sw_sdb4" == "511" ]||[ "$sw_sdb4" == "512" ]; then
          echo -e "\e[32mswap_size_chk: Pass\e[0m\n"
      else
          echo -e "\e[31mswap_size_chk: Fail\e[0m\n"
      fi
   else
          echo -e "\e[31mswp_disk_chk: Fail\e[0m\n"
   fi
}
################################################################################
check_ACL(){
    echo "Check Q20 (a): /var/tmp/fstab permissions..."

    ls -l /var/tmp/fstab | grep '^-..r..r..r' | grep root | grep root &>/dev/null
    st1=$?

    getfacl /var/tmp/fstab | grep -w "user:natasha:rw" &>/dev/null
    st2=$?

    getfacl /var/tmp/fstab | grep -w "user:harry:---" &>/dev/null
    st3=$?

    if [ $st1 -eq 0 ] && [ $st2 -eq 0 ] && [ $st3 -eq 0 ]; then
        echo -e "\e[32mCheck Q20a: Pass\e[0m\n"
    else
        echo -e "\e[31mCheck Q20a: Fail\e[0m\n"
    fi
}

check_ACL_bob(){
    echo "Check Q20 (b): /tmp/data2 ACL for bob..."

    [ -d /tmp/data2 ] && getfacl /tmp/data2 | grep -w "user:bob:rw" &>/dev/null
    st1=$?

    ls -ld /tmp/data2 | grep '^d.......-' &>/dev/null
    st2=$?

    if [ $st1 -eq 0 ] && [ $st2 -eq 0 ]; then
        echo -e "\e[32mCheck Q20b: Pass\e[0m\n"
    else
        echo -e "\e[31mCheck Q20b: Fail\e[0m\n"
    fi
}

################################################################################
check__webimage(){
    echo "Check Q21 (a): Container image webimage..."

    su - linda -c "podman images | grep -w webimage" &>/dev/null
    st=$?

    if [ $st -eq 0 ]; then
        echo -e "\e[32mCheck Q21a Image: Pass\e[0m\n"
    else
        echo -e "\e[31mCheck Q21a Image: Fail\e[0m\n"
    fi
}

check_web_container1(){
    echo "Check Q21 (b): Container web_container1..."

    su - linda -c "podman ps -a | grep -w web_container1" &>/dev/null
    st=$?

    if [ $st -eq 0 ]; then
        echo -e "\e[32mCheck Q21b Container: Pass\e[0m\n"
    else
        echo -e "\e[31mCheck Q21b Container: Fail\e[0m\n"
    fi
}

check_pdf_file_conversion(){
    echo "Check Q21 (b): File converted to PDF..."

    [ -f /opt/myplans/my_file1.pdf ]
    st=$?

    if [ $st -eq 0 ]; then
        echo -e "\e[32mCheck Q21b PDF: Pass\e[0m\n"
    else
        echo -e "\e[31mCheck Q21b PDF: Fail\e[0m\n"
    fi
}
################################################################################
check_new_webimage(){
    echo "Check Q22 (a): Container image new_webimage..."

    su - kevin -c "podman images | grep -w new_webimage" &>/dev/null
    st=$?

    if [ $st -eq 0 ]; then
        echo -e "\e[32mCheck Q22a Image: Pass\e[0m\n"
    else
        echo -e "\e[31mCheck Q22a Image: Fail\e[0m\n"
    fi
}

check_container_myweb1(){
    echo "Check Q22 (b): Container myweb1..."

    su - kevin -c "podman ps -a | grep -w myweb1" &>/dev/null
    st=$?

    if [ $st -eq 0 ]; then
        echo -e "\e[32mCheck Q22b Container: Pass\e[0m\n"
    else
        echo -e "\e[31mCheck Q22b Container: Fail\e[0m\n"
    fi
}

check_pdf_file_conversion(){
    echo "Check Q23 (b): File converted to PDF..."

    [ -f /opt/myplans/my_file1.pdf ]
    st=$?

    if [ $st -eq 0 ]; then
        echo -e "\e[32mCheck Q22b PDF: Pass\e[0m\n"
    else
        echo -e "\e[31mCheck Q22b PDF: Fail\e[0m\n"
    fi
}

################################################################################
check_autofs_config() {
    echo "Checking Autofs Q23..."

    su - $user_name -c "ls /automount/public &>/dev/null" &>/dev/null
    ro_check=$?

    su - $user_name -c "touch /automount/private/testfile2" &>/dev/null
    rw_check=$?

    df -h | grep '/automount/public' &>/dev/null
    mn1=$?

    df -h | grep '/automount/private' &>/dev/null
    mn2=$?

    if [ $ro_check -eq 0 ] && [ $rw_check -eq 0 ] && [ $mn1 -eq 0 ] && [ $mn2 -eq 0 ]; then
        echo -e "\e[32mAutoFS_Check Q23: Pass\e[0m\n"
    else
        echo -e "\e[31mAutoFS_Check Q23: Fail\e[0m\n"
    fi
}

################################################################################
